<?php

declare(strict_types=1);

namespace Elrise\Bundle\DbalBundle\BulkTestCommands;

use Doctrine\DBAL\Connection;
use Elrise\Bundle\DbalBundle\Manager\Contract\DbalFinderInterface;
use Elrise\Bundle\DbalBundle\Manager\Contract\DbalMutatorInterface;
use Elrise\Bundle\DbalBundle\Service\Transaction\TransactionServiceInterface;
use RuntimeException;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Throwable;

#[AsCommand(name: 'dbal:test:transaction-service')]
final class TransactionServiceCommand extends AbstractTestCommand
{
    public function __construct(
        protected Connection $connection,
        private readonly TransactionServiceInterface $transactionService,
        private readonly DbalMutatorInterface $mutator,
        private readonly DbalFinderInterface $finder,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->truncateTable(self::TABLE_NAME);

        $output->writeln('üöÄ –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å commit...');

        $data = $this->generateNormalRow();
        unset($data['id']);

        $this->transactionService->transactional(function () use ($output, $data) {
            $output->writeln('üü¢ –í–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî commit');
            $this->mutator->insert('test_data_types', $data);

            return true;
        });

        $output->writeln('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        $output->writeln('üî• –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å rollback...');

        try {
            $this->transactionService->transactional(function () use ($output, $data): void {
                $output->writeln('üî¥ –í–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –≤—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è');
                $this->mutator->insert('test_data_types', $data);
                throw new RuntimeException('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è rollback');
            });
        } catch (Throwable $e) {
            $output->writeln('üõë –û–∂–∏–¥–∞–µ–º—ã–π rollback —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ' . $e->getMessage());
        }

        $count = $this->finder->count(self::TABLE_NAME);

        if ($count === 1) {
            $output->writeln('üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ –±–∞–∑–µ –æ—Å—Ç–∞–ª–∞—Å—å 1 –∑–∞–ø–∏—Å—å ‚Äî ‚úÖ OK' . "\n");
        } else {
            $output->writeln("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ –±–∞–∑–µ –æ–∂–∏–¥–∞–ª–∞—Å—å 1 –∑–∞–ø–∏—Å—å, –Ω–∞–π–¥–µ–Ω–æ: $count ‚Äî ‚ùå ERROR\n");
        }

        return Command::SUCCESS;
    }

    protected function getTestType(): string
    {
        return 'transactions';
    }
}
